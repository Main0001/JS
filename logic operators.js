// 'use strict'

// let manufacturer = ""; // оператор ||= преобразует пустую строку "" к логическому значению false

// manufacturer ||= "Неизвестный производитель"; // то же самое, что false || (manufacturer = "...")

// alert( manufacturer ); // "Неизвестный производитель"
// // Оператор логического присваивания ИЛИ ||= – это «синтаксический сахар», добавленный в язык в качестве более короткого варианта записи if-выражений с присваиванием.

// // Мы можем переписать приведённые выше примеры с использованием обычного if:

// let johnHasCar = false;

// if (johnHasCar == false) {
//   johnHasCar = "У Джона нет машины!";
// }

// alert(johnHasCar); // "У Джона нет машины!"

// let manufacturer1 = "";

// if (manufacturer1 == false) {
//   manufacturer = "Неизвестный производитель";
// }

// alert(manufacturer); // "Неизвестный производитель"


// // ИЛИ "||" находит первое истинное значение
// // Описанная выше логика соответствует традиционной. Теперь давайте поработаем с «дополнительными» возможностями JavaScript.

// // Расширенный алгоритм работает следующим образом.

// // При выполнении ИЛИ || с несколькими значениями:

// result = value1 || value2 || value3;
// // Оператор || выполняет следующие действия:

// // Вычисляет операнды слева направо.
// // Каждый операнд конвертирует в логическое значение. Если результат true, останавливается и возвращает исходное значение этого операнда.
// // Если все операнды являются ложными (false), возвращает последний из них.
// // Значение возвращается в исходном виде, без преобразования.

// // Другими словами, цепочка ИЛИ || возвращает первое истинное значение или последнее, если такое значение не найдено.

// //Tasks

// //1
// alert( null || 2 || undefined ); // 2

// //2 
// alert( alert(1) || 2 || alert(3) ); //1, затем 2, т.к. alert return undefined

// //3

// alert( 1 && null && 2 ); // null

// //4

// alert( alert(1) && alert(2) ); //1, затем

// //5

// alert( null || 2 && 3 || 4 ); //3, т.к 2&&3 === 3 и null||3||4 

// //6

// let value = NaN;

// value &&= 10;
// value ||= 20;
// value &&= 30;
// value ||= 40;

// alert(value);

// /*
// value &&= 10
// value=NaN
// NaN конвертируется в логическое значение false
// value ложно, поэтому присваивание не срабатывает
// value ||= 20
// value=NaN
// NaN конвертируется в логическое значение false
// value ложно, поэтому присваивание срабатывает
// value &&= 30
// value=20
// 20 конвертируется в логическое значение true
// value истинно, поэтому присваивание срабатывает
// value ||= 40
// value=30
// 30 конвертируется в логическое значение true
// value истинно, поэтому присваивание не срабатывает
// */

// //7

// if (age >= 14 && age <=90) {alert({});}

// //8

// if (!(age >= 14 && age <= 90)) {alert({});}
// if (!(age <= 14 || age >= 90)) {alert({});}

// //9

// // Выполнится.
// // Результат -1 || 0 = -1, в логическом контексте true
// if (-1 || 0) alert( 'first' );

// // Не выполнится
// // -1 && 0 = 0,  в логическом контексте false
// if (-1 && 0) alert( 'second' );

// // Выполнится
// // оператор && имеет больший приоритет, чем ||
// // так что -1 && 1 выполнится раньше
// // вычисления: null || -1 && 1  ->  null || 1  ->  1
// if (null || -1 && 1) alert( 'third' );

//10

let login = prompt('Введите логин:', '');

if (login === 'Админ') {
    let password = prompt('Введите пароль', '');
    if (password === 'Я главный') {
        alert('Здравствуйте');
    }
    else if (password === '' || password === null) {
        alert('Отменено');
    }
    else {
        alert('Неверный пароль')
    }
}
else if (login === '' || login === null) {
    alert('Отменено');
}
else {
    alert('Я вас не знаю');
}

////////////////////////////////////////

let userAge = null;

if (userAge === null || userAge === undefined) {
  userAge = 18;
}

//Аналог значению выше
x ??= y

/*
Оператор нулевого слияния представляет собой два вопросительных знака ??.

Так как он обрабатывает null и undefined одинаковым образом, то для этой статьи мы введём специальный термин. Для краткости будем говорить, что значение «определено», если оно не равняется ни null, ни undefined.

Результат выражения a ?? b будет следующим:

если a определено, то a,
если a не определено, то b.
*/

//Tasks

//1
alert(undefined ?? NaN ?? null ?? "" ?? " "); //Nan
//2
let city = null;

city ??= "Берлин";
city ??= null;
city ??= "Кёльн";
city ??= "Гамбург";

alert(city); //Берлин
//3

/*

let num1 = 10,
    num2 = 20,
    result;

if (result === null || result === undefined) {
  if (num1 !== null && num1 !== undefined) {
    result = num1;
  } else {
    result = num2;
  }
}

*/

result ??= num1 ?? num2;