let range = {
  from: 1,
  to: 5
};

// 1. –≤—ã–∑–æ–≤ for..of —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
range[Symbol.iterator] = function() {

  // ...–æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞:
  // 2. –î–∞–ª–µ–µ, for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º,
  // –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —É –Ω–µ–≥–æ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  return {
    current: this.from,
    last: this.to,

    // 3. next() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ for..of
    next() {
      // 4. –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ {done:.., value :...}
      if (this.current <= this.last) {
        return { done: false, value: this.current++ };
      } else {
        return { done: true };
      }
    }
  };
};

// —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!
for (let num of range) {
  alert(num); // 1, –∑–∞—Ç–µ–º 2, 3, 4, 5
}

let range = {
  from: 1,
  to: 5,

  [Symbol.iterator]() {
    this.current = this.from;
    return this;
  },

  next() {
    if (this.current <= this.to) {
      return { done: false, value: this.current++ };
    } else {
      return { done: true };
    }
  }
};

for (let num of range) {
  alert(num); // 1, –∑–∞—Ç–µ–º 2, 3, 4, 5
}

for (let char of "test") {
  // —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 4 —Ä–∞–∑–∞: –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
  alert( char ); // t, –∑–∞—Ç–µ–º e, –∑–∞—Ç–µ–º s, –∑–∞—Ç–µ–º t
}

let str = "Hello";

// –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏
// for (let char of str) alert(char);

let iterator = str[Symbol.iterator]();

while (true) {
  let result = iterator.next();
  if (result.done) break;
  alert(result.value); // –≤—ã–≤–æ–¥–∏—Ç —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
}

let arrayLike = { // –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∏ —Å–≤–æ–π—Å—Ç–≤–æ length => –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤
  0: "Hello",
  1: "World",
  length: 2
};

// –û—à–∏–±–∫–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Symbol.iterator)
for (let item of arrayLike) {} 
//–û–±—ä–µ–∫—Ç –Ω–µ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π

// –ï—Å—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ Array.from, 
// –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤
// –∏ –¥–µ–ª–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ ¬´–Ω–∞—Å—Ç–æ—è—â–∏–π¬ª Array. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã —É–∂–µ –º–æ–∂–µ–º 
// –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤.

arrayLike = {
  0: "Hello",
  1: "World",
  length: 2
};

arr = Array.from(arrayLike); // (*)
alert(arr.pop()); // World (–º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç)

// range –≤–∑—è—Ç –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç–∞—Ç—å–∏

// –≤–æ–∑–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç
arr = Array.from(range, num => num * num);

alert(arr); // 1,4,9,16,25

str = 'ùí≥üòÇ';

// —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ –µ—ë —ç–ª–µ–º–µ–Ω—Ç–æ–≤
let chars = Array.from(str);

alert(chars[0]); // ùí≥
alert(chars[1]); // üòÇ
alert(chars.length); // 2

function slice(str, start, end) {
  return Array.from(str).slice(start, end).join('');
}

str = 'ùí≥üòÇ©∑∂';

alert( slice(str, 1, 3) ); // üòÇ©∑∂

// –∞ –≤–æ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
alert( str.slice(1, 3) ); // –º—É—Å–æ—Ä (–¥–≤–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã—Ö –ø–∞—Ä)